alpha=0.05
nGenes=nrow(d)
tableF = topTableF(fit2, number=nGenes, sort.by="none") #screening hypothesis
pScreen=tableF$P.Value
pConfirmation=sapply(1:3,function(i) topTable(fit2, coef=i, number=nGenes, sort.by="none")$P.Value)
dimnames(pConfirmation)=list(rownames(fit2),c("t1","t2","t1t2"))
stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation, pScreenAdjusted=FALSE)
adjustedPSW <- stageWiseAdjustment(object=stageRObj, method="none", alpha=0.05)
adjustedAlphaLevel(adjustedPSW)
adjustedPSW <- stageWiseAdjustment(object=stageRObj, method="user", alpha=0.05, adjustment=c(1,1,1))
res <- getResults(adjustedPSW)
colSums(res)
library(tidyr)
dataMessy <- read.csv(file="/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/kallisto_table_unnormalized_unfiltered.csv",header=TRUE)
dataMessy <- dataMessy[,c("target_id","est_counts","sample")]
dataClean <- tidyr::spread(dataMessy,key=sample,value=est_counts)
rownames(dataClean) <- dataClean[,"target_id"]
dataClean <- dataClean[,-1]
save(dataClean,file="/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/dataClean.rda")
library(tools)
resaveRdaFiles("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/dataClean.rda")
rm(dataMessy)
load("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/dataClean.rda")
load_all()
document()
x <- sample(1000)
x
?use_data
data <- dataClean
use_data(data,stageR)
mtcars
devtools::use_data(x, mtcars)
use_data(data)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/data.rda")
load_all()
document()
prostateData=data
use_data(prostateData)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/prostateData.rda")
tx2gene <- read.delim("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/ensemblGeneTxGeneName.txt",header=TRUE)
mean(is.na(match(rownames(dataClean),tx2gene$Ensembl.Transcript.ID))) #very few tx dont have a match
sum(is.na(match(rownames(dataClean),tx2gene$Ensembl.Transcript.ID))) #very few tx dont have a match
library(biomaRt)
dim(prostateData)
prostateData=prostateData[1:5000,]
library(biomaRt)
marts()
mart()
biomaRt::listMarts()
biomaRt::useDataset("ENSEMBL_MART_ENSEMBL")
biomaRt::useMart("ENSEMBL_MART_ENSEMBL")
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL")
?select
columns(mart)
listDatasets(mart)
?useMart
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", version=85)
listMarts)
listMarts()
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", version="Ensembl Genes 85")
mart = biomaRt::useMart("Ensembl Genes 85", version=TRUE)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", version="Ensembl Genes 85", archive=TRUE)
listMarts(archive=TRUE)
listMarts(host='mar2016.archive.ensembl.org')
?useMart
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org')
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
library(biomaRt)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
keys(mart)
columns(mart)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
columns(mart)
head(columns(mart))
hlp=columns(mart)
str(hlp)
hlp
grep(hlp,pattern="hsapiens")
hlp[grep(hlp,pattern="hsapiens")]
hlp[grep(hlp,pattern="human")]
hlp[grep(hlp,pattern="homo")]
hlp[grep(hlp,pattern="sapiens")]
?select
keytypes(mart)
head(prostateData)
select(x=mart, keys=rownames(prostateData), keytypes="ensembl_transcript_id", columns="ensembl_gene_id")
select(x=mart, keys=rownames(prostateData), keytype="ensembl_transcript_id", columns="ensembl_gene_id")
tx2gene <- select(x=mart, keys=rownames(prostateData), keytype="ensembl_transcript_id", columns="ensembl_gene_id")
head(tx2gene)
dim(tx2gene)
length(rownames(prostateData))
hlp = sapply(rownames(prostateData), function(tx) select(x=mart, keys=tx, keytype="ensembl_transcript_id", columns="ensembl_gene_id"))
?getBM
head(listFilters())
head(listFilters(mart))
hlp = getBM(attributes="ensembl_gene_id", filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart)
head(hlp)
dim(hlp)
hlp = getBM(attributes="ensembl_gene_id", filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE)
dim(hlp)
hlp = getBM(attributes="ensembl_gene_id", filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
dim(hlp)
hlp = getBM(attributes="ensembl_gene_id", filters="ensembl_transcript_id", values=rownames(prostateData)[1:1000], mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
dim(hlp)
hlp
rownames(hlp)
as.numeric(rownames(hlp))
diff(as.numeric(rownames(hlp)))
anh(diff(as.numeric(rownames(hlp)))!=1)
any(diff(as.numeric(rownames(hlp)))!=1)
getBM(filters="ensembl_gene_id")
getBM(filters="ensembl_gene_id",mart=mart)
keys(mart)
k=keys(mart, keytype="ensembl_gene_id")
k
hlp = getBM(attributes=columns=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
hlp = getBM(attributes=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
dim(hlp)
hlp
tx2geneBM = getBM(attributes=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
tx2gene <- read.delim("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/ensemblGeneTxGeneName.txt",header=TRUE)
tx2gene=tx2gene[tx2gene$Ensembl.Transcript.ID%in%rownames(prostateData),]
dim(tx2gene)
dim(tx2geneBM)
any(duplicated(tx2gene$Ensembl.Transcript.ID))
any(duplicated(tx2geneBM$`Ensembl Transcript ID`))
dim(data)
prostateData=data
library(biomaRt)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
tx2geneBM = getBM(attributes=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
head(tx2geneBM)
colnames(tx2geneBM) <- c("Ensembl.Transcript.ID","Ensembl.Gene.ID")
mean(is.na(match(rownames(prostateData),tx2geneBM$Ensembl.Transcript.ID))) #very few tx dont have a match
mean(is.na(match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID))) #very few tx dont have a match
tx2gene <- read.delim("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/ensemblGeneTxGeneName.txt",header=TRUE)
mean(is.na(match(rownames(prostateData),tx2geneBM$Ensembl.Transcript.ID))) #very few tx dont have a match
mean(is.na(match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID))) #very few tx dont have a match
dim(prostateData)
prostateData=prostateData[1:5000,]
library(biomaRt)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
tx2gene = getBM(attributes=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
colnames(tx2gene) <- c("Ensembl.Transcript.ID","Ensembl.Gene.ID")
mean(is.na(match(rownames(prostateData),tx2geneBM$Ensembl.Transcript.ID))) #very few tx dont have a match
metaData <- read.table("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/sampleDataRelationship.txt",header=TRUE,sep="\t")
assays <- metaData$Assay.Name
runs <- as.character(metaData$Comment.ENA_RUN.)[seq(1,length(assays),2)]
samples=gsub(x=assays,pattern="_[1-2]",replacement="")[seq(1,length(assays),2)]
patient=factor(sapply(samples,function(x) substr(x,1,nchar(x)-1)))
condition=factor(sapply(samples,function(x) substr(x,nchar(x),nchar(x))))
dataClean <- dataClean[,match(runs,colnames(dataClean))] #same ordering as metadata
sampleData <- data.frame(condition=condition,patient=patient)
rownames(sampleData)=colnames(dataClean)
metaData <- read.table("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/sampleDataRelationship.txt",header=TRUE,sep="\t")
assays <- metaData$Assay.Name
runs <- as.character(metaData$Comment.ENA_RUN.)[seq(1,length(assays),2)]
samples=gsub(x=assays,pattern="_[1-2]",replacement="")[seq(1,length(assays),2)]
patient=factor(sapply(samples,function(x) substr(x,1,nchar(x)-1)))
condition=factor(sapply(samples,function(x) substr(x,nchar(x),nchar(x))))
prostateData <- prostateData[,match(runs,colnames(prostateData))] #same ordering as metadata
sampleData <- data.frame(condition=condition,patient=patient)
rownames(sampleData)=colnames(prostateData)
prostateData <- ceiling(prostateData)
## remove tx without gene match
prostateData <- prostateData[!is.na(match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)),]
## remove all zero rows
prostateData <- prostateData[!rowSums(prostateData)==0,]
## remove genes with only one tx
geneTable <- table(as.character(tx2gene$Ensembl.Gene.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)]))
genesWithOneTx <- names(geneTable)[geneTable==1]
txFromGenesWithOneTx <- tx2gene$Ensembl.Transcript.ID[tx2gene$Ensembl.Gene.ID%in%genesWithOneTx]
prostateData <- prostateData[!rownames(prostateData)%in%as.character(txFromGenesWithOneTx),]
txGeneData = as.data.frame(cbind(rownames(prostateData),as.character(tx2gene$Ensembl.Transcript.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)]),as.character(tx2gene$Ensembl.Gene.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)])))
colnames(txGeneData)=c("tx","transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
prostateData=dataClean[1:50000,]
library(biomaRt)
mart = biomaRt::useMart("ENSEMBL_MART_ENSEMBL", host='mar2016.archive.ensembl.org', dataset="hsapiens_gene_ensembl")
tx2gene = getBM(attributes=c("ensembl_transcript_id","ensembl_gene_id"), filters="ensembl_transcript_id", values=rownames(prostateData), mart=mart, bmHeader=TRUE, uniqueRows=TRUE)
colnames(tx2gene) <- c("Ensembl.Transcript.ID","Ensembl.Gene.ID")
mean(is.na(match(rownames(prostateData),tx2geneBM$Ensembl.Transcript.ID))) #very few tx dont have a match
metaData <- read.table("/Users/koenvandenberge/PhD_Data/dtu/humanCancer/prostateCancer/sampleDataRelationship.txt",header=TRUE,sep="\t")
assays <- metaData$Assay.Name
runs <- as.character(metaData$Comment.ENA_RUN.)[seq(1,length(assays),2)]
samples=gsub(x=assays,pattern="_[1-2]",replacement="")[seq(1,length(assays),2)]
patient=factor(sapply(samples,function(x) substr(x,1,nchar(x)-1)))
condition=factor(sapply(samples,function(x) substr(x,nchar(x),nchar(x))))
prostateData <- prostateData[,match(runs,colnames(prostateData))] #same ordering as metadata
sampleData <- data.frame(condition=condition,patient=patient)
rownames(sampleData)=colnames(prostateData)
### clean up
prostateData <- ceiling(prostateData)
## remove tx without gene match
prostateData <- prostateData[!is.na(match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)),]
## remove all zero rows
prostateData <- prostateData[!rowSums(prostateData)==0,]
## remove genes with only one tx
geneTable <- table(as.character(tx2gene$Ensembl.Gene.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)]))
genesWithOneTx <- names(geneTable)[geneTable==1]
txFromGenesWithOneTx <- tx2gene$Ensembl.Transcript.ID[tx2gene$Ensembl.Gene.ID%in%genesWithOneTx]
prostateData <- prostateData[!rownames(prostateData)%in%as.character(txFromGenesWithOneTx),]
txGeneData = as.data.frame(cbind(rownames(prostateData),as.character(tx2gene$Ensembl.Transcript.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)]),as.character(tx2gene$Ensembl.Gene.ID[match(rownames(prostateData),tx2gene$Ensembl.Transcript.ID)])))
colnames(txGeneData)=c("tx","transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
library(DEXSeq)
dxd <- DEXSeqDataSet(countData = prostateData,
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(prostateData),
groupID = as.character(txGeneData$gene))
prostateData=data
prostateData=data[1:50000,]
load("~/esetProstate.RData")
devtools::use_data(esetProstate)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
esetProstate
pData(esetProstate)
fData(esetProstate)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
rm(list=ls())
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
dim(esetProstate)
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
table(table(txGeneData$gene))
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
library(DEXSeq)
dxd <- DEXSeqDataSet(countData = prostateData,
sampleData = sampleData,
sampleData
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = prostateData,
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(prostateData),
groupID = as.character(txGeneData$gene))
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(prostateData),
groupID = as.character(txGeneData$gene))
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(esetProstate),
groupID = as.character(txGeneData$gene))
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd, fitType="local")
dxd <- estimateDispersions(dxd)
rm(list=ls())
load("~/esetProstate.RData")
dim(esetProstate)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
devtools::use_data(esetProstate)
devtools::use_data(esetProstate,overwrite=TRUE)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
esetProstate
load("~/esetProstate.RData")
devtools::use_data(esetProstate,overwrite=TRUE)
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
esetProstate
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(esetProstate),
groupID = as.character(txGeneData$gene))
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd, reducedModel = ~ sample + exon + patient)
dxr <- DEXSeqResults(dxd)
plotDispEsts(dxd)
hist(dxr$pvalue)
qvalDxr <- perGeneQValue(dxr)
pConfirmation=matrix(dxr$pvalue)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2geneOrdered=fData(esetProstate)
pConfirmation=matrix(dxr$pvalue,ncol=1)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2geneOrdered=fData(esetProstate)
head(pConfirmation)
head(pScreen)
head(tx2gene)
tx2gene=fData(esetProstate)
head(tx2gene)
pConfirmation=matrix(dxr$pvalue,ncol=1)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2gene=fData(esetProstate)
stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation, pScreenAdjusted=TRUE)
adjustedPStageWise <- stageWiseAdjustment(object=stageRObj, method="dtu", alpha=0.05, tx2gene=tx2gene)
head(getSignificantGenes(adjustedPStageWise))
res=getResults(adjustedPStageWise)
rownames(res)=rownames(adjustedPStageWise@adjustedP)
head(res)
res=getResults(adjustedPStageWise)
#rownames(res)=rownames(adjustedPStageWise@adjustedP)
head(res)
colSums(res)
head(getSignificantGenes(adjustedPStageWise))
pScreen
any(is.na(pScreen))
head(getSignificantGenes(adjustedPStageWise))
getSignificantGenes(adjustedPStageWise)
getAdjustedPValues(adjustedPStageWise)
any(is.na(qvalDxr))
qvalDxr
padj = getAdjustedPValues(adjustedPStageWise)
head(padj)
rm(list=ls())
suppressPackageStartupMessages({library(edgeR) ; library(Biobase) ; library(limma) ; library(utils) ; library(devtools)})
devtools::load_all("~/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/")
#data("esetProstate",package="stageR")
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
### regular DEXSeq analysis
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(esetProstate),
groupID = as.character(txGeneData$gene))
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd, reducedModel = ~ sample + exon + patient)
dxr <- DEXSeqResults(dxd)
plotDispEsts(dxd)
hist(dxr$pvalue)
qvalDxr <- perGeneQValue(dxr)
pConfirmation=matrix(dxr$pvalue,ncol=1)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2gene=fData(esetProstate)
stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation, pScreenAdjusted=TRUE)
adjustedPStageWise <- stageWiseAdjustment(object=stageRObj, method="dtu", alpha=0.05, tx2gene=tx2gene)
head(getSignificantGenes(adjustedPStageWise))
padj = getAdjustedPValues(adjustedPStageWise)
head(padj)
res=getResults(adjustedPStageWise)
head(res)
rm(list=ls())
#data("esetProstate",package="stageR")
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
pConfirmation=matrix(dxr$pvalue,ncol=1)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2gene=fData(esetProstate)
#data("esetProstate",package="stageR")
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
### regular DEXSeq analysis
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(esetProstate),
groupID = as.character(txGeneData$gene))
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
setwd("~")
suppressPackageStartupMessages({library(edgeR) ; library(Biobase) ; library(limma) ; library(utils) ; library(devtools)})
devtools::load_all("~/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/")
#library(stageR)
#download.file("http://bowtie-bio.sourceforge.net/recount/ExpressionSets/hammer_eset.RData",destfile="~/hammer_eset.RData")
load("~/hammer_eset.RData")
eset = hammer.eset ; rm(hammer.eset)
eset@phenoData@data$Time #typo. Will do it ourself
time = factor(rep(c("mo2","w2"),each=4),levels=c("w2","mo2"))
eset@phenoData@data$protocol
treat = factor(c("control","control","SNL","SNL","control","control","SNL","SNL"),levels=c("control","SNL"))
design = model.matrix(~time*treat)
rownames(design) = paste0(time,treat,rep(1:2,4))
colnames(design)[4] = "timeMo2xTreatSNL"
cpmOffset=2
keep = rowSums(cpm(exprs(eset))>cpmOffset)>=2 #2cpm in 2 samples
d = DGEList(exprs(eset)[keep,])
colnames(d) = rownames(design)
d = calcNormFactors(d)
L=matrix(0,ncol=3,nrow=ncol(design))
colnames(L)=c("SNL-C_w2","SNL-C_mo2","SNL-C_mo2-w2")
rownames(L)=colnames(design)
L["treatSNL",1]=1
L[grep(rownames(L),pattern="SNL"),2]=1
L[,3]=L[,2]-L[,1]
L
## regular analysis
v = voom(d,design,plot=TRUE)
fit=lmFit(v,design)
contrast.matrix <- makeContrasts(treatSNL, treatSNL+timeMo2xTreatSNL, timeMo2xTreatSNL, levels=design)
fit2 = contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)
res=decideTests(fit2)
summary.TestResults(res) #nr of significant up-/downregulated genes
colSums(summary.TestResults(res)[c(1,3),]) #total nr of significant genes
uniqueGenesRegular=which(res[,1]!=0 | res[,2]!=0 | res[,3]!=0)
length(uniqueGenesRegular) #total nr of significant genes
#library(stageR)
alpha=0.05
nGenes=nrow(d)
tableF = topTableF(fit2, number=nGenes, sort.by="none") #screening hypothesis
pScreen=tableF$P.Value
pConfirmation=sapply(1:3,function(i) topTable(fit2, coef=i, number=nGenes, sort.by="none")$P.Value)
dimnames(pConfirmation)=list(rownames(fit2),c("t1","t2","t1t2"))
stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation, pScreenAdjusted=FALSE)
adjustedPSW <- stageWiseAdjustment(object=stageRObj, method="none", alpha=0.05)
adjustedAlphaLevel(adjustedPSW)
head(getAdjustedPValues(adjustedPSW, onlySignificantGenes=FALSE))
head(getAdjustedPValues(adjustedPSW, onlySignificantGenes=TRUE))
res <- getResults(adjustedPSW)
head(res)
colSums(res) #stage-wise analysis results
adjustedPSW <- stageWiseAdjustment(object=stageRObj, method="user", alpha=0.05, adjustment=c(1,1,1))
res <- getResults(adjustedPSW)
colSums(res)
#data("esetProstate",package="stageR")
load("/Users/koenvandenberge/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/data/esetProstate.rda")
head(pData(esetProstate))
head(fData(esetProstate))
txGeneData = fData(esetProstate)
colnames(txGeneData)=c("transcript","gene")
barplot(table(table(txGeneData$gene)), main="Distribution of number of tx per gene")
#this leaves us with
length(unique(txGeneData$gene)) #nr genes
median(table(as.character(txGeneData$gene))) #median nr of tx/gene
### regular DEXSeq analysis
library(DEXSeq)
sampleData=pData(esetProstate)
dxd <- DEXSeqDataSet(countData = exprs(esetProstate),
sampleData = sampleData,
design = ~ sample + exon + patient + condition:exon,
featureID = rownames(esetProstate),
groupID = as.character(txGeneData$gene))
dxd <- estimateSizeFactors(dxd)
dxd <- estimateDispersions(dxd)
dxd <- testForDEU(dxd, reducedModel = ~ sample + exon + patient)
dxr <- DEXSeqResults(dxd)
plotDispEsts(dxd)
hist(dxr$pvalue)
qvalDxr <- perGeneQValue(dxr)
pConfirmation=matrix(dxr$pvalue,ncol=1)
rownames(pConfirmation)=dxr$featureID
pScreen=qvalDxr
tx2gene=fData(esetProstate)
stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation, pScreenAdjusted=TRUE)
tx2gene=fData(esetProstate)
adjustedPStageWise <- stageWiseAdjustment(object=stageRObj, method="dtu", alpha=0.05, tx2gene=tx2gene)
head(getSignificantGenes(adjustedPStageWise))
padj = getAdjustedPValues(adjustedPStageWise)
head(padj)
res=getResults(adjustedPStageWise)
head(res)
build()
library(devtools)
build()
