{
    "collab_server" : "",
    "contents" : "#' @include stageRClasses.R allGenerics.R\n\n\n.stageWiseTest <- function(pScreen, pConfirmation, alpha, method=c(\"none\",\"holm\",\"dte\",\"dtu\",\"user\"), adjustment=NULL, tx2gene=NULL, pScreenAdjusted){\n    method <- match.arg(method,c(\"none\",\"holm\",\"dte\",\"dtu\",\"user\"))\n\n        if(method==\"none\"){\n\n          if(!pScreenAdjusted) padjScreen <- p.adjust(pScreen,\"BH\") else padjScreen <- pScreen\n          genesStageI <- padjScreen<alpha\n\t        pAdjConfirmation <- matrix(1,nrow=nrow(pConfirmation),ncol=ncol(pConfirmation), dimnames=list(c(rownames(pConfirmation)),colnames(pConfirmation)))\n\t        pAdjConfirmation[genesStageI,] <- pConfirmation[genesStageI,]\n\t        padjScreenReturn=padjScreen\n\n    } else if(method==\"holm\"){\n\n      if(!pScreenAdjusted) padjScreen <- p.adjust(pScreen,\"BH\") else padjScreen <- pScreen\n      genesStageI <- padjScreen<alpha\n      padjScreenReturn=padjScreen\n\t## only do correction for genes that passed the screening stage\n\tpAdjConfirmation <- matrix(1,nrow=nrow(pConfirmation),ncol=ncol(pConfirmation), dimnames=list(c(rownames(pConfirmation)),colnames(pConfirmation)))\n\n\tpAdjConfirmation[genesStageI,] <- t(sapply(1:length(which(genesStageI)), function(i){\n\t  row <- pConfirmation[which(genesStageI)[i],]\n\t\t# Holm correction conditional on passing the screening stage.\n\t\to <- order(row)\n\t\tn <- length(row)\n\t\t# Holm adjustment: passing screening stage implies 1 false hypothesis\n\t\tadjustment <- c(n-1,(n-1):1)\n\t\trowAdjusted <- row[o]*adjustment\n\t\trowAdjusted <- pmin(rowAdjusted,1)\n\t\trowAdjusted <- cummax(rowAdjusted)\n\t\trowBack <- vector(length=length(row))\n\t\trowBack[o] <- rowAdjusted\n\t\trowBack\n}))\n\n    } else if(method==\"user\" && length(adjustment)==ncol(pConfirmation)){\n\n    if(!pScreenAdjusted) padjScreen <- p.adjust(pScreen,\"BH\") else padjScreen <- pScreen\n    genesStageI <- padjScreen<alpha\n    padjScreenReturn=padjScreen\n\tpAdjConfirmation <- matrix(1,nrow=nrow(pConfirmation),ncol=ncol(pConfirmation), dimnames=list(c(rownames(pConfirmation)),colnames(pConfirmation)))\n\tpAdjConfirmation[genesStageI,] <- t(sapply(1:length(which(genesStageI)), function(i){\n\t  row <- pConfirmation[which(genesStageI)[i],]\n\t\t  o <- order(row)\n\t\t  rowAdjusted <- row[o]*adjustment\n\t\t  rowAdjusted <- pmin(rowAdjusted,1)\n\t\t  # check monotone increase of adjusted p-values\n\t\t  rowAdjusted <- cummax(rowAdjusted)\n\t\t  rowBack <- vector(length=length(row))\n\t\t  rowBack[o] <- rowAdjusted\n\t\t  rowBack\n\t}))\n\n    } else if(method==\"dte\"){\n\n      if(any(is.na(match(rownames(pConfirmation),tx2gene[,1])))) stop(\"not all transcript names in pConfirmation match with a transcript ID from the tx2gene object.\")\n      if(any(is.na(match(names(pScreen),tx2gene[,2])))) stop(\"not all gene names in pScreen match with a gene ID from the tx2gene object.\")\n      # adjust screening\n      if(!pScreenAdjusted) padjScreen <- p.adjust(pScreen,\"BH\") else padjScreen <- pScreen\n      genesStageI <- padjScreen<=alpha\n      significantGenes <- names(padjScreen)[genesStageI]\n      geneForEachTx <- tx2gene[match(rownames(pConfirmation),tx2gene[,1]),2]\n      txLevelAdjustments <- sapply(significantGenes,function(gene){\n        id <- which(geneForEachTx %in% gene)\n        row <- pConfirmation[id,]\n        o <- order(row)\n        n <- length(row)\n        # DTE adjustment: passing screening stage implies 1 false hypothesis\n        if(n==1) adjustment=0 else adjustment=c(n-1,(n-1):1)\n        rowAdjusted <- row[o]*adjustment\n        rowAdjusted <- pmin(rowAdjusted,1)\n        rowAdjusted <- cummax(rowAdjusted)\n        rowBack <- vector(length=length(row))\n        rowBack[o] <- rowAdjusted\n        names(rowBack) <- names(row)\n        rowBack\n      })\n      pAdjConfirmation <- matrix(1,nrow=nrow(pConfirmation),ncol=1)\n      rownames(pAdjConfirmation) <- paste0(geneForEachTx,\".\",rownames(pConfirmation))\n      # adjusted p-values for screening hypothesis\n      padjScreenReturn <- padjScreen[geneForEachTx]\n      # adjusted p-values for confirmation hypothesis\n      pAdjConfirmation[names(unlist(txLevelAdjustments)),1] = unlist(txLevelAdjustments)\n\n    } else if(method==\"dtu\"){\n\n      if(any(is.na(match(rownames(pConfirmation),tx2gene[,1])))) stop(\"not all transcript names in pConfirmation match with a transcript ID from the tx2gene object.\")\n      if(any(is.na(match(names(pScreen),tx2gene[,2])))) stop(\"not all gene names in pScreen match with a gene ID from the tx2gene object.\")\n      # adjust screening\n      if(!pScreenAdjusted) padjScreen <- p.adjust(pScreen,\"BH\") else padjScreen <- pScreen\n      genesStageI <- padjScreen<=alpha\n      significantGenes <- names(padjScreen)[genesStageI]\n      geneForEachTx <- tx2gene[match(rownames(pConfirmation),tx2gene[,1]),2]\n      #geneForEachTx <- as.character(tx2gene[match(as.character(tx2gene[,1]),rownames(pConfirmation)),2])\n      txLevelAdjustments <- sapply(significantGenes,function(gene){\n        id <- which(geneForEachTx %in% gene)\n        row <- pConfirmation[id,]\n        o <- order(row)\n        n <- length(row)\n        # DTU adjustment: passing screening stage implies 2 false hypotheses\n        if(n==2) adjustment=c(0,0) else adjustment=c(n-2,n-2,(n-2):1)\n        rowAdjusted <- row[o]*adjustment\n        rowAdjusted <- pmin(rowAdjusted,1)\n        rowAdjusted <- cummax(rowAdjusted)\n        rowBack <- vector(length=length(row))\n        rowBack[o] <- rowAdjusted\n        names(rowBack) <- names(row)\n        rowBack\n      })\n      pAdjConfirmation <- matrix(1,nrow=nrow(pConfirmation),ncol=1)\n      rownames(pAdjConfirmation) <- paste0(geneForEachTx,\".\",rownames(pConfirmation))\n      # adjusted p-values for screening hypothesis\n      padjScreenReturn <- padjScreen[as.character(geneForEachTx)]\n      # adjusted p-values for confirmation hypothesis\n      pAdjConfirmation[names(unlist(txLevelAdjustments)),1] = unlist(txLevelAdjustments)\n\n    } else stop(\"method must be either one of 'holm' or ... \")\n\n    #padjScreenOrdered <- padjScreen[geneOrder]\n    alphaAdjusted <- sum(padjScreen<=alpha)/length(padjScreen)*alpha\n    pAdjStage <- cbind(padjScreenReturn,pAdjConfirmation)\n    colnames(pAdjStage)[1] <- \"padjScreen\"\n    if(method %in% c(\"dte\",\"dtu\")){\n      pAdjStage=cbind(pAdjConfirmation,padjScreenReturn)[,2:1]\n      colnames(pAdjStage) = c(\"gene\",\"transcript\")\n      }\n    return(list(pAdjStage=pAdjStage, alphaAdjusted=alphaAdjusted))\n    #padjScreenOrdered <- padjScreen[geneOrder]\n    #alphaAdjusted <- (1:length(padjScreenOrdered))/length(padjScreenOrdered)*alpha\n    #pListAll <- cbind(padjScreenOrdered,alphaAdjusted,pAdjList[geneOrder,])\n    #return(pListAll)\n}\n\n.getAdjustedP <- function(object, onlySignificantGenes=FALSE){\n\tif(onlySignificantGenes){\n\t  warning(paste0(\"the returned adjusted p-values are based on a stage-wise testing approach and should be compared to the adjusted alpha level of \"),round(adjustedAlphaLevel(object),6),\", as returned by the 'getAdjustedAlphaLevel' function.\")\n\t    genesStageI <- object@adjustedP[,1]<=object@alpha\n\t    if(sum(genesStageI)==0){ message(paste0(\"No genes were found to be significant on a \",alpha*100,\"% OFDR level.\")) } else{\n\t    return(object@adjustedP[genesStageI,])}\n\t} else {\n\t    return(object@adjustedP)\n\t}\n}\n\n\n.getResults <- function(object){\n    results=matrix(0,nrow=nrow(object@adjustedP),ncol=ncol(object@adjustedP), dimnames=dimnames(object@adjustedP))\n    results[object@adjustedP[,1]<=object@alpha,1] = 1\n    results[,-1][which(object@adjustedP[,-1]<=object@alphaAdjusted)] = 1\n    return(results)\n}\n\n\n#' adjust p-values in a two-stage analysis\n#'\n#' This function will adjust p-values according to a hierarchical two-stage testing paradigm.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @param method Character string indicating the method used for FWER correction in the confirmation stage of the stage-wise analysis. Can be any of \\code{\"none\"}, \\code{\"holm\"}, \\code{\"dte\"}, \\code{\"dtu\"}, \\code{\"user\"}. \\code{\"none\"} will not adjusted the p-values in the confirmation stage. \\code{\"holm\"} is an adapted Holm procedure for a stage-wise analysis, where the method takes into account the fact that genes in the confirmation stage have already passed the screening stage, hence the procedure will be more powerful for the most significant p-value as compared to the standard Holm procedure. \\code{\"dte\"} is the adjusted Holm-Shaffer procedure for differential transcript expression analysis. \\code{\"dtu\"} is the adjusted Holm-Shaffer procedure for differential transcript usage. \\code{\"user\"} indicates a user-defined adjustment that should be specified with the \\code{adjustment} argument.\n#' @param alpha the OFDR on which to control the two-stage analysis.\n#' @param adjustment a user-defined adjustment of the confirmation stage p-values. Only applicable when \\code{method} is \\code{\"none\"} and ignored otherwise.\n#' @param tx2gene Only applicable when  \\code{method} is \\code{\"dte\"} or \\code{\"dtu\"}.  A \\code{\\link[base]{data.frame}} with transcript IDs in the first columns and gene IDs in the second column. The rownames from \\code{pConfirmation} must be contained in the transcript IDs from \\code{tx2gene}, and the names from \\code{pScreen} must be contained in the gene IDs.\n#' @references\n#' Van den Berge K., Soneson C., Robinson M.D., and Clement L, \"A generic stage-wise testing procedure for differential expression and differential transcript usage.\" To be submitted.\n#' R. Heller, E. Manduchi, G. R. Grant, and W. J. Ewens, “A flexible two-stage procedure for identifying gene sets that are differentially expressed.” Bioinformatics (Oxford, England), vol. 25, pp. 1019–25, apr 2009.\n#' S. Holm, “A Simple Sequentially Rejective Multiple Test Procedure,” Scandinavian Journal of Statistics, vol. 6, no. 2, pp. 65–70, 1979.\n#' J. P. Shaffer, “Modified Sequentially Rejective Multiple Test Procedures,” Journal of the American Statistical Asso- ciation, vol. 81, p. 826, sep 1986.\n#' @examples\n#' pScreen=c(seq(1e-10,1e-2,length.out=100),seq(1e-2,.2,length.out=100),seq(.2,1,length.out=100))\n#' stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' adjustedP <- stageWiseAdjustment(stageRObj, method=\"holm\", alpha=0.05)\n#' getAdjustedPValues(adjustedP, onlySignificantGenes=TRUE)\n#' @name stageWiseAdjustment\n#' @rdname stageWiseAdjustment\nsetMethod(\"stageWiseAdjustment\",signature=signature(object=\"stageR\", method=\"character\", alpha=\"numeric\"),\n\t  definition=function(object, method, alpha, ...){\n\t      pScreen=object@pScreen\n\t      pConfirmation=object@pConfirmation\n\t      pScreenAdjusted=object@pScreenAdjusted\n\t      stageAdjPValues <- .stageWiseTest(pScreen=pScreen, pConfirmation=pConfirmation, alpha=alpha, method=method,  pScreenAdjusted=pScreenAdjusted, ...)\n\t      object@adjustedP <- stageAdjPValues[[\"pAdjStage\"]]\n\t      object@alphaAdjusted <- stageAdjPValues[[\"alphaAdjusted\"]]\n\t      object@method <- method\n\t      object@alpha <- alpha\n\t      return(object)\n\t  })\n\n#' Return screening hypothesis p-values from a \\code{\\link{stageRClass}} object.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @examples\n#' stageRObj <- buildStageR(pScreen=seq(1e-4,.5,length.out=1000), pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' getPScreen(stageRObj)\n#' @name getPScreen\n#' @rdname getPScreen\nsetMethod(\"getPScreen\",signature=signature(object=\"stageR\"),\n\t  definition=function(object){return(object@pScreen)})\n\n#' Return unadjusted confirmation hypothesis p-values from a \\code{\\link{stageRClass}} object.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @examples\n#' stageRObj <- buildStageR(pScreen=seq(1e-4,.5,length.out=1000), pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' getPConfirmation(stageRObj)\n#' @name getPConfirmation\n#' @rdname getPConfirmation\nsetMethod(\"getPConfirmation\",signature=signature(object=\"stageR\"),\n\t  definition=function(object){return(object@pConfirmation)})\n\n#' Retrieve the stage-wise adjusted p-values.\n#'\n#' This functions returns the stage-wise adjusted p-values for an object from the  \\code{\\link{stageRClass}} class. Note, that the p-values should have been adjusted with the \\code{\\link{stageWiseAdjustment}} function prior to calling this function.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @details\n#' The function returns FDR adjusted p-values for the screening hypothesis and stage-wise adjusted p-values for the confirmation hypothesis p-values. For features that were not significant in the screening hypothesis, the confirmation stage adjusted p-values are set to 1.\n#' @examples\n#' pScreen=c(seq(1e-10,1e-2,length.out=100),seq(1e-2,.2,length.out=100),seq(.2,1,length.out=100))\n#' stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' adjustedP <- stageWiseAdjustment(stageRObj, method=\"holm\", alpha=0.05)\n#' getAdjustedPValues(adjustedP)\n#' @name getAdjustedPValues\n#' @rdname getAdjustedPValues\nsetMethod(\"getAdjustedPValues\",signature=signature(object=\"stageR\"),\n\t  definition=function(object, ...){\n\t      return(.getAdjustedP(object=object, ...))\n\t  })\n\n#' Get adjusted significance level from the screening stage.\n#'\n#' This functions returns the adjusted significance level from the screening stage that should be used to compare confirmation stage FWER adjusted p-values to.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @details\n#' The adjusted significance level is calculated as the fraction of significant features in the screening stage times the alpha level.\n#' @examples\n#' pScreen=c(seq(1e-10,1e-2,length.out=100),seq(1e-2,.2,length.out=100),seq(.2,1,length.out=100))\n#' stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' adjustedP <- stageWiseAdjustment(stageRObj, method=\"holm\", alpha=0.05)\n#' adjustedAlphaLevel(adjustedP)\n#' @name adjustedAlphaLevel\n#' @rdname adjustedAlphaLevel\nsetMethod(\"adjustedAlphaLevel\",signature=signature(object=\"stageR\"),\n\t  definition=function(object){return(object@alphaAdjusted)})\n\n#' Get significance results accroding to a stage-wise analysis.\n#'\n#' This functions returns a matrix that indicates whether a specific feature is significant for a specific hypothesis of interest according to a stage-wise analysis.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @details\n#' The FDR adjusted screening hypothesis p-values are compared to the alpha level specified. The FWER adjusted confirmation stage p-values are compared to the adjusted significance level from the screening stage.\n#' @examples\n#' pScreen=c(seq(1e-10,1e-2,length.out=100),seq(1e-2,.2,length.out=100),seq(.2,1,length.out=100))\n#' stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=matrix(runif(3000),nrow=1000,ncol=3))\n#' adjustedP <- stageWiseAdjustment(stageRObj, method=\"holm\", alpha=0.05)\n#' head(getResults(adjustedP))\n#' @name getResults\n#' @rdname getResults\nsetMethod(\"getResults\",signature=signature(object=\"stageR\"),\n\t  definition=function(object){ return(.getResults(object)) })\n\n#' Return significant genes when performing transcript level analysis.\n#'\n#' This functions returns a matrix with significant genes by aggregated testing of its respective transcripts.\n#'\n#' @param object an object of the \\code{\\link{stageRClass}} class.\n#' @examples\n#' #make identifiers linking transcripts to genes\n#' set.seed(1)\n#' genes=paste0(\"gene\",sample(1:200,1000,replace=TRUE))\n#' nGenes=length(table(genes))\n#' transcripts=paste0(\"tx\",1:1000)\n#' tx2gene=data.frame(transcripts,genes)\n#' #gene-wise q-values\n#' pScreen=c(seq(1e-10,1e-2,length.out=nGenes-100),seq(1e-2,.2,length.out=50),seq(50))\n#' names(pScreen)=names(table(genes)) #discards genes that are not simulated\n#' pConfirmation=matrix(runif(1000),nrow=1000,ncol=1)\n#' rownames(pConfirmation)=transcripts\n#' stageRObj <- buildStageR(pScreen=pScreen, pConfirmation=pConfirmation ,pScreenAdjusted=TRUE)\n#' adjustedP <- stageWiseAdjustment(stageRObj, method=\"dte\", alpha=0.05, tx2gene=tx2gene)\n#' head(getSignificantGenes(adjustedP))\n#' @name getSignificantGenes\n#' @rdname getSignificantGenes\nsetMethod(\"getSignificantGenes\",signature=signature(object=\"stageR\"),\n          definition=function(object){\n            ### set control whether adjustedP slot really exists in object\n            IDs=rownames(object@adjustedP)\n            geneIDs=unlist(lapply(strsplit(IDs,split=\".\",fixed=TRUE),function(x) x[1]))\n            significantGeneIDs=object@adjustedP[,1]<=object@alpha\n            significantGeneNames=geneIDs[significantGeneIDs]\n            geneAdjustedPValues=object@adjustedP[significantGeneIDs,1]\n            dups=duplicated(significantGeneNames)\n            significantGenes=matrix(geneAdjustedPValues[!dups],ncol=1,dimnames=list(significantGeneNames[!dups],\"FDR adjusted p-value\"))\n            return(significantGenes)\n          })\n",
    "created" : 1482315548325.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1361452885",
    "id" : "C539825",
    "lastKnownWriteTime" : 1482933227,
    "last_content_update" : 1482933227683,
    "path" : "~/Dropbox/PhD/Research/stageWiseTesting/stageR/stageR/R/accessors.R",
    "project_path" : "R/accessors.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}